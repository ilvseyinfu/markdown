{"version":3,"sources":["pages/Markdown/index.js","App.js","serviceWorker.js","index.js"],"names":["Markdown","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sourceData","myRef","React","createRef","field","e","_this2","setState","defineProperty","target","value","localStorage","setItem","getItem","txt","current","start","selectionStart","end","selectionEnd","md","substring","html","marked","react_default","a","createElement","className","title","onClick","handle","bind","ref","placeholder","onChange","change","dangerouslySetInnerHTML","__html","Component","App","Markdown_Markdown","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAMqBA,iCACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAY,IAEdR,EAAKS,MAAQC,IAAMC,YALFX,sEAQZY,EAAOC,GAAG,IAAAC,EAAAX,KACfA,KAAKY,SAALd,OAAAe,EAAA,EAAAf,CAAA,GACGW,EAAQC,EAAEI,OAAOC,OACjB,WACDC,aAAaC,QAAQ,aAAcN,EAAKP,MAAMC,0DAKhD,IAAMA,EAAaW,aAAaE,QAAQ,cACpCb,GACFL,KAAKY,SAAS,CAAEP,8CAIbI,GACL,IAAMU,EAAMnB,KAAKM,MAAMc,QACjBC,EAAQF,EAAIG,eACZC,EAAMJ,EAAIK,aACZC,EAAKzB,KAAKI,MAAMC,WAChBgB,IAAUE,IACE,SAAVd,EACFgB,EAAKA,EAAGC,UAAU,EAAGL,GAAS,KAAOI,EAAGC,UAAUL,EAAOE,GAAO,KAAOE,EAAGC,UAAUH,GACjE,QAAVd,EACTgB,EAAKA,EAAGC,UAAU,EAAGL,GAAS,KAAOI,EAAGC,UAAUL,EAAOE,GAAO,KAAOE,EAAGC,UAAUH,GACjE,YAAVd,IACTgB,EAAKA,EAAGC,UAAU,EAAGL,GAAS,QAAUI,EAAGC,UAAUL,EAAOE,GAAO,KAAOE,EAAGC,UAAUH,KAG3FvB,KAAKY,SAAS,CAAEP,WAAYoB,qCAI5B,IAAME,EAAOC,IAAO5B,KAAKI,MAAMC,YAC/B,OACEwB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WADpB,2CAIAH,EAAAC,EAAAC,cAAA,KAAGE,MAAM,eAAKC,QAASlC,KAAKmC,OAAOC,KAAKpC,KAAM,QAASgC,UAAU,0CAC/DH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAEfH,EAAAC,EAAAC,cAAA,KAAGE,MAAM,qBAAMC,QAASlC,KAAKmC,OAAOC,KAAKpC,KAAM,OAAQgC,UAAU,0CAC/DH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mCAEfH,EAAAC,EAAAC,cAAA,KAAGE,MAAM,eAAKC,QAASlC,KAAKmC,OAAOC,KAAKpC,KAAM,WAAYgC,UAAU,0CAClEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,YAAUM,IAAKrC,KAAKM,MAAO0B,UAAU,oCAAoCM,YAAY,mBACnFvB,MAAOf,KAAKI,MAAMC,WAClBkC,SAAUvC,KAAKwC,OAAOJ,KAAKpC,KAAM,kBAIvC6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbS,wBAAyB,CAAEC,OAAQf,eArEXgB,cCQvBC,0LARX,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACc,EAAD,cAJUF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cecd068a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport marked from 'marked';\nimport 'github-markdown-css';\nimport 'bulma/css/bulma.css';\nimport './style.css';\n\nexport default class Markdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sourceData: ''\n    };\n    this.myRef = React.createRef();\n  }\n\n  change(field, e) {\n    this.setState({\n      [field]: e.target.value\n    }, () => {\n      localStorage.setItem('sourceData', this.state.sourceData);\n    });\n  }\n\n  componentDidMount() {\n    const sourceData = localStorage.getItem('sourceData');\n    if (sourceData) {\n      this.setState({ sourceData });\n    }\n  }\n\n  handle(field) {\n    const txt = this.myRef.current;\n    const start = txt.selectionStart;\n    const end = txt.selectionEnd;\n    let md = this.state.sourceData;\n    if (start !== end) {\n      if (field === 'blob') {\n        md = md.substring(0, start) + '**' + md.substring(start, end) + '**' + md.substring(end);\n      } else if (field === 'del') {\n        md = md.substring(0, start) + '~~' + md.substring(start, end) + '~~' + md.substring(end);\n      } else if (field === 'yinyong') {\n        md = md.substring(0, start) + '\\n > ' + md.substring(start, end) + '\\n' + md.substring(end);\n      }\n    }\n    this.setState({ sourceData: md });\n  }\n\n  render() {\n    const html = marked(this.state.sourceData);\n    return (\n      <div>\n        <div className=\"notification is-primary\">\n          <button className=\"delete\"></button>\n          Markdown 文本编辑器\n        </div>\n        <a title=\"加粗\" onClick={this.handle.bind(this, 'blob')} className=\"button is-primary is-outlined is-small\">\n          <i className=\"iconfont icon-zitijiacu\"></i>\n        </a>\n        <a title=\"中划线\" onClick={this.handle.bind(this, 'del')} className=\"button is-primary is-outlined is-small\">\n          <i className=\"iconfont icon-zitishanchuxian\"></i>\n        </a>\n        <a title=\"引用\" onClick={this.handle.bind(this, 'yinyong')} className=\"button is-primary is-outlined is-small\">\n          <i className=\"iconfont icon-yinyong\"></i>\n        </a>\n        <div className=\"field left\">\n          <div className=\"control\">\n            <textarea ref={this.myRef} className=\"textarea is-primary markdown-body\" placeholder=\"Primary textarea\"\n              value={this.state.sourceData}\n              onChange={this.change.bind(this, 'sourceData')}\n            />\n          </div>\n        </div>\n        <div className=\"field right\">\n          <div className=\"control\">\n            <div className=\"textarea is-info markdown-body\"\n              dangerouslySetInnerHTML={{ __html: html }}\n            ></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Markdown from './pages/Markdown';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Markdown />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}